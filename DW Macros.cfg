#####################################################################
# 	Macros
#####################################################################
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
   
[bed_mesh]
speed: 100
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
#mesh_radius:
#   Defines the radius of the mesh to probe for round beds. Note that
#   the radius is relative to the coordinate specified by the
#   mesh_origin option. This parameter must be provided for round beds
#   and omitted for rectangular beds.
#mesh_origin:
#   Defines the center x,y coordinate of the mesh for round beds. This
#   coordinate is relative to the probe's location. It may be useful
#   to adjust the mesh_origin in an effort to maximize the size of the
#   mesh radius. Default is 0,0. This parameter must be omitted for
#   rectangular beds.
mesh_min:30, 30
#   Defines the minimum x,y coordinate of the mesh for rectangular
#   beds. This coordinate is relative to the probe's location. This
#   will be the first point probed, nearest to the origin. This
#   parameter must be provided for rectangular beds.
mesh_max: 265, 265
#   Defines the maximum x,y coordinate of the mesh for rectangular
#   beds. Adheres to the same principle as mesh_min, however this will
#   be the furthest point probed from the bed's origin. This parameter
#   must be provided for rectangular beds.
probe_count: 6,6
#   For rectangular beds, this is a comma separate pair of integer
#   values (X,Y) defining the number of points to probe along each
#   axis. A single value is also valid, in which case that value will
#   be applied to both axes. Default is 3,3.
#round_probe_count: 5
#   For round beds, this integer value defines the maximum number of
#   points to probe along each axis. This value must be an odd number.
#   Default is 5.
fade_start: .5
#   The gcode z position in which to start phasing out z-adjustment
#   when fade is enabled. Default is 1.0.
fade_end: 10.0
#   The gcode z position in which phasing out completes. When set to a
#   value below fade_start, fade is disabled. It should be noted that
#   fade may add unwanted scaling along the z-axis of a print. If a
#   user wishes to enable fade, a value of 10.0 is recommended.
#   Default is 0.0, which disables fade.
#fade_target:
#   The z position in which fade should converge. When this value is
#   set to a non-zero value it must be within the range of z-values in
#   the mesh. Users that wish to converge to the z homing position
#   should set this to 0. Default is the average z value of the mesh.
split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will trigger
#   a split. Default is .025.
move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
mesh_pps: 2,2
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed point.
#   The user may enter a single value which will be applied to both
#   axes. Default is 2,2.
algorithm: lagrange
#   The interpolation algorithm to use. May be either "lagrange" or
#   "bicubic". This option will not affect 3x3 grids, which are forced
#   to use lagrange sampling. Default is lagrange.
#bicubic_tension: .2
#   When using the bicubic algorithm the tension parameter above may
#   be applied to change the amount of slope interpolated. Larger
#   numbers will increase the amount of slope, which results in more
#   curvature in the mesh. Default is .2.
#relative_reference_index: 12
#zero_reference_position: 150,150 #for use with stock z endstop
#   A point index in the mesh to reference all z values to. Enabling
#   this parameter produces a mesh relative to the probed z position
#   at the provided index.
#faulty_region_1_min:
#faulty_region_1_max:
#   Optional points that define a faulty region.  See docs/Bed_Mesh.md
#   for details on faulty regions.  Up to 99 faulty regions may be added.
#   By default no faulty regions are set.

##[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#gcode:
    #G28                            ; Home all axes
#    G32                            ; home all axes
#    clean_nozzle
#    G1 Z10 Y280 F3000                   ; move nozzle away from bed
#    #clean_nozzle
#    bed_mesh_calibrate
#    #calibrate_z
    
#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
gcode:
    {% set BED = params.BED|default(65)|float %}                     # bed temperature target
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}            # synonym for BED
    {% set EXTRUDER = params.EXTRUDER|default(210)|float %}          # extruder temperature target
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}  # synonym for EXTRUDER
#    {% set MATERIAL = params.MATERIAL|default("PLA")|string %}       # Material to print - PLA | PETG | ABS | TPU | ASA
#    {% set CHAMBER = params.CHAMBER|default(0)|float %}              # Desired chamber minimum temp (set to 0 to ignore chamber temp)
    {% set NO_MESH = params.NO_MESH|default(0)|int %}                # Set to 1 to disable KAMP temporarily

    {% if (EXTRUDER_TEMP > 0) %}
	    {% set EXTRUDER = EXTRUDER_TEMP %}
    {% endif %}

    {% if (BED_TEMP > 0) %}
	    {% set BED = BED_TEMP %}
    {% endif %}

    #STATUS_HEATING
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}    ; set bed temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150        ; set nozzle temp for probing -- needs to be hot enough to squish any filament on the nozzle
    #M118 Heating extruder to 150C
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=150             
    #M118 Homing...
    #STATUS_HOMING
    M300
    G21          ; set to mm
    M220 S100	 ; set print speed to 100%
    M221 S100	 ; set flow rate to 100%
    M107         ; disable fans
    G90          ; absolute positioning
    HOME_IF_NEEDED

    #STATUS_HEATING
    M118 Heating bed to {BED}C
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED}    ; wait for bed temp         

#    {% if CHAMBER > 0 %}
#	M118 Waiting for chamber to reach {CHAMBER}C
#	TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={CHAMBER}
#    {% endif %}

    #STATUS_HOMING
    #M118 QGL
    G32                                                 ; home

    {% if NO_MESH != 1 %}
        #M118 Building mesh
        #STATUS_MESHING
        BED_MESH_CALIBRATE
    {% else %}
        M118 Skipping mesh
    {% endif %}

    #STATUS_HEATING
    #M118 Heating extruder to {EXTRUDER}C...
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER} ; wait for extruder temp

    #STATUS_PRINTING
#    SET_SKEW XY=98.83,99.84,70.4
    #M118 Purge Line
    M83                                                 ; extruder to relative mode
    G92 E0                                              ; Reset extruder
    #SMART_PARK
    VORON_PURGE
    G92 E0
    M400		                                ; clear buffer
    #UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
    #M118 Printing
#    SET_FILAMENT_SENSOR SENSOR=filament_presence ENABLE=1

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    G91
    G1 Z10 F3000 #move nozzle up from print to avoid collision
     E-3 F300 #retract to avoid oozing
     G1 Z10 
    G90
    G1 X295 Y300
#    #G28 X Y #Home to back corner to clear print bed
    
#[gcode_macro CANCEL_PRINT]
#description: Cancel the actual running print
#rename_existing: BASE_CANCEL_PRINT
#gcode:
#    TURN_OFF_HEATERS
#    CLEAR_PAUSE
#    SDCARD_RESET_FILE
#    BASE_CANCEL_PRINT
#    G1 Z2 F3000                    ; move nozzle up 2mm
#    G90                            ; absolute positioning
#    G0  X125 Y300 F3600            ; park nozzle at rear
#    RESTORE_GCODE_STATE NAME=STATE_CANCELED
  
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
#[gcode_macro CANCEL_PRINT]
#rename_existing: BASE_CANCEL_PRINT
#gcode:
#    [END_PRINT]
#    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
#    ##SDCARD_RESET_FILE
#    M400 							            ; wait for buffer to clear
#    G92 E0 							          ; zero the extruder
#    G1 E-10.0 F1200 				      ; retract filament
#    G91 							            ; relative positioning
#    TURN_OFF_HEATERS
#    M107 							            ; turn off fan
#    G1 Z2 F3000                    ; move nozzle up 2mm
#    G90                            ; absolute positioning
#    G0  X125 Y300 F3600            ; park nozzle at rear
    #RESTORE_GCODE_STATE NAME=STATE_CANCELED

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
